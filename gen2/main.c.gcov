        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:19
        -:    0:Programs:1
        -:    1:#include "print.h"
        -:    2:
        -:    3:/* keyword list */
        -:    4:struct KEY key[MAXKEYWORD] = {
        -:    5:        {"and",       TAND},
        -:    6:        {"array",     TARRAY},
        -:    7:        {"begin",     TBEGIN},
        -:    8:        {"boolean",   TBOOLEAN},
        -:    9:        {"break",     TBREAK},
        -:   10:        {"call",      TCALL},
        -:   11:        {"char",      TCHAR},
        -:   12:        {"div",       TDIV},
        -:   13:        {"do",        TDO},
        -:   14:        {"else",      TELSE},
        -:   15:        {"end",       TEND},
        -:   16:        {"false",     TFALSE},
        -:   17:        {"if",        TIF},
        -:   18:        {"integer",   TINTEGER},
        -:   19:        {"not",       TNOT},
        -:   20:        {"of",        TOF},
        -:   21:        {"or",        TOR},
        -:   22:        {"procedure", TPROCEDURE},
        -:   23:        {"program",   TPROGRAM},
        -:   24:        {"read",      TREAD},
        -:   25:        {"readln",    TREADLN},
        -:   26:        {"return",    TRETURN},
        -:   27:        {"then",      TTHEN},
        -:   28:        {"true",      TTRUE},
        -:   29:        {"var",       TVAR},
        -:   30:        {"while",     TWHILE},
        -:   31:        {"write",     TWRITE},
        -:   32:        {"writeln",   TWRITELN}
        -:   33:};
        -:   34:
function main called 40 returned 100% blocks executed 100%
       40:   35:int main(int nc, char *np[]) {
        -:   36:    FILE *fp;
       40:   37:    int is_success = 0;
        -:   38:
       40:   39:    if (nc < 2) {
branch  0 taken 3%
branch  1 taken 98%
        1:   40:        fprintf(stderr, "File name id not given.\n");
        1:   41:        return EXIT_FAILURE;
        -:   42:    }
        -:   43:
       39:   44:    if (init_scan(np[1], &fp) < 0) {
branch  0 taken 92%
branch  1 taken 8%
        3:   45:        fprintf(stderr, "File %s can not open.\n", np[1]);
        3:   46:        return EXIT_FAILURE;
        -:   47:    }
        -:   48:
       36:   49:    token = scan(fp);
       36:   50:    is_success = parse_program(fp);
       36:   51:    end_scan(fp);
        -:   52:
       36:   53:    if (is_success == NORMAL) {
branch  0 taken 61%
branch  1 taken 39%
       22:   54:        return EXIT_SUCCESS;
        -:   55:    } else {
       14:   56:        return EXIT_FAILURE;
        -:   57:    }
       40:   58:}
        -:   59:
function error called 15 returned 100% blocks executed 100%
       15:   60:int error(char *mes) {
       15:   61:    fflush(stdout);
       15:   62:    fprintf(stderr, "\nline%d ERROR: %s\n", get_linenum(), mes);
       15:   63:    return (ERROR);
        -:   64:}
